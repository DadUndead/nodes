channel_logo() {
  echo -e '\033[0;31m'
  echo -e '‚îå‚îê ‚îå‚îÄ‚îê‚îå‚îÄ‚îê‚îå‚îÄ‚îê‚îå‚î¨‚îê‚î¨‚î¨ ‚î¨  ‚îå‚îÄ‚îê‚î¨ ‚î¨‚îå‚îê ‚î¨‚î¨  '
  echo -e '‚îú‚î¥‚îê‚îÇ ‚îÇ‚îÇ ‚î¨‚îú‚îÄ‚î§ ‚îÇ ‚îÇ‚îî‚î¨‚îò  ‚îî‚îÄ‚îê‚îî‚î¨‚îò‚îú‚î¥‚îê‚îÇ‚îÇ  '
  echo -e '‚îî‚îÄ‚îò‚îî‚îÄ‚îò‚îî‚îÄ‚îò‚î¥ ‚î¥ ‚î¥ ‚î¥ ‚î¥   ‚îî‚îÄ‚îò ‚î¥ ‚îî‚îÄ‚îò‚î¥‚î¥‚îÄ‚îò'
  echo -e '\e[0m'
  echo -e "\n\n–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ —Å–∞–º—ã–π 4ekHyTbIu* –∫–∞–Ω–∞–ª –≤ –∫—Ä–∏–ø—Ç–µ @bogatiy_sybil [üí∏]"
}

download_node() {
  echo '–ù–∞—á–∏–Ω–∞—é —É—Å—Ç–∞–Ω–æ–≤–∫—É –Ω–æ–¥—ã...'

  sudo apt update && sudo apt upgrade -y

  sudo apt install gnupg lsb-release apt-transport-https ca-certificates nano curl jq software-properties-common -y
  
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
  echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
  sudo apt update && sudo apt install -y docker-ce docker-ce-cli containerd.io
  sudo usermod -aG docker $USER
  newgrp docker

  docker pull nillion/verifier:v1.0.1 || echo 'Docker –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
  mkdir -p nillion/verifier
  docker run -v ./nillion/verifier:/var/tmp nillion/verifier:v1.0.1 initialise
}

check_all_states() {
  priv_key=$(jq -r '.priv_key' nillion/verifier/credentials.json)
  pub_key=$(jq -r '.pub_key' nillion/verifier/credentials.json)
  nillion_address=$(jq -r '.address' nillion/verifier/credentials.json)

  echo "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: $priv_key"
  echo "public_key: $pub_key"
  echo "verifier id (nillion address): $nillion_address"
}

launch_node() {
  echo '–ó–∞–ø—É—Å–∫–∞—é –Ω–æ–¥—É...'

  docker run -v ./nillion/verifier:/var/tmp nillion/verifier:v1.0.1 verify --rpc-endpoint "https://testnet-nillion-rpc.lavenderfive.com"
}

check_node_logs() {
  logs_to_check=$(docker ps -a | grep 'nillion/verifier' | awk '{print $1}')
  docker logs $logs_to_check --tail 700 -f
}

restart_node() {
  logs_to_check=$(docker ps -a | grep 'nillion/verifier' | awk '{print $1}')
  docker restart $logs_to_check
}

delete_node() {
  read -p '–ï—Å–ª–∏ —É–≤–µ—Ä–µ–Ω—ã —É–¥–∞–ª–∏—Ç—å –Ω–æ–¥—É, –≤–≤–µ–¥–∏—Ç–µ –ª—é–±—É—é –±—É–∫–≤—É (CTRL+C —á—Ç–æ–±—ã –≤—ã–π—Ç–∏): ' checkjust

  logs_to_check=$(docker ps -a | grep 'nillion/verifier' | awk '{print $1}')
  docker stop $logs_to_check
  docker rm $logs_to_check

  cd $HOME
  sudo rm -r nillion/
}

exit_from_script() {
  exit 0
}

while true; do
    channel_logo
    sleep 2
    echo -e "\n\n–ú–µ–Ω—é:"
    echo "1. üõ†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–¥—É"
    echo "2. üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ"
    echo "3. üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–¥—É"
    echo "4. üìú –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏"
    echo "5. üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–¥—É"
    echo "6. üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –Ω–æ–¥—É"
    echo -e "7. ‚ùå –í—ã–π—Ç–∏ –∏–∑ —Å–∫—Ä–∏–ø—Ç–∞\n"
    read -p "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é: " choice

    case $choice in
      1)
        download_node
        ;;
      2)
        check_all_states
        ;;
      3)
        launch_node
        ;;
      4)
        check_node_logs
        ;;
      5)
        restart_node
        ;;
      6)
        delete_node
        ;;
      7)
        exit_from_script
        ;;
      *)
        echo "–ù–µ–≤–µ—Ä–Ω—ã–π –ø—É–Ω–∫—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ü–∏—Ñ—Ä—É –≤ –º–µ–Ω—é."
        ;;
    esac
  done
