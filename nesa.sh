channel_logo() {
  echo -e '\033[0;31m'
  echo -e '‚îå‚îê ‚îå‚îÄ‚îê‚îå‚îÄ‚îê‚îå‚îÄ‚îê‚îå‚î¨‚îê‚î¨‚î¨ ‚î¨  ‚îå‚îÄ‚îê‚î¨ ‚î¨‚îå‚îê ‚î¨‚î¨  '
  echo -e '‚îú‚î¥‚îê‚îÇ ‚îÇ‚îÇ ‚î¨‚îú‚îÄ‚î§ ‚îÇ ‚îÇ‚îî‚î¨‚îò  ‚îî‚îÄ‚îê‚îî‚î¨‚îò‚îú‚î¥‚îê‚îÇ‚îÇ  '
  echo -e '‚îî‚îÄ‚îò‚îî‚îÄ‚îò‚îî‚îÄ‚îò‚î¥ ‚î¥ ‚î¥ ‚î¥ ‚î¥   ‚îî‚îÄ‚îò ‚î¥ ‚îî‚îÄ‚îò‚î¥‚î¥‚îÄ‚îò'
  echo -e '\e[0m'
  echo -e "\n\n–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ —Å–∞–º—ã–π 4ekHyTbIu* –∫–∞–Ω–∞–ª –≤ –∫—Ä–∏–ø—Ç–µ @bogatiy_sybil [üí∏]"
}

download_node() {
  sudo apt install lsof

  ports=(5001 8080 4001 27017 31333)

  for port in "${ports[@]}"; do
    if [[ $(lsof -i :"$port" | wc -l) -gt 0 ]]; then
      echo "–û—à–∏–±–∫–∞: –ü–æ—Ä—Ç $port –∑–∞–Ω—è—Ç. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ —Å–º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è."
      exit 1
    fi
  done

  echo -e "–í—Å–µ –ø–æ—Ä—Ç—ã —Å–≤–æ–±–æ–¥–Ω—ã! –°–µ–π—á–∞—Å –Ω–∞—á–Ω–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞...\n"

  sudo apt update -y && sudo apt upgrade -y
  sudo apt install curl jq ca-certificates nano software-properties-common make gnupg lsb-release  -y

  if ! command -v docker &> /dev/null; then
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    sudo apt update && sudo apt install -y docker-ce docker-ce-cli containerd.io
    sudo usermod -aG docker $USER
  else
    echo "Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É..."
  fi

  if ! command -v docker-compose &> /dev/null; then
    VER=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep tag_name | cut -d '"' -f 4)
    curl -L "https://github.com/docker/compose/releases/download/$VER/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    chmod +x /usr/local/bin/docker-compose
  else
    echo "Docker-compose —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É..."
  fi
  sudo apt-get install -y docker-buildx-plugin docker-compose-plugin

  echo '–ù–æ–¥–∞ –±—ã–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ —Å–ª–µ–¥—É–π—Ç–µ –¥–∞–ª—å—à–µ –ø–æ –≥–∞–π–¥—É.'
}

launch_node() {
  REF_CODE="nesa120ywlaxmtlqr537f9z788wv9vjpa7hpcl98kh0" bash <(curl -s https://raw.githubusercontent.com/nesaorg/bootstrap/master/bootstrap.sh)
}

check_node_id() {
  cat $HOME/.nesa/identity/node_id.id
  echo
}

check_logs() {
  docker logs orchestrator -f --tail 300
}

check_priv_key() {
  file="$HOME/.nesa/env/orchestrator.env"
  priv_key=$(grep -oP '^NODE_PRIV_KEY="\K[^"]+' "$file")

  echo $priv_key
}

restart_node() { 
  echo '–î–µ–ª–∞—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É...'

  docker restart orchestrator mongodb docker-watchtower-1 ipfs_node

  echo '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.'
}

stop_node() {
  echo '–ù–∞—á–∏–Ω–∞—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É...'

  docker stop orchestrator mongodb docker-watchtower-1 ipfs_node

  echo '–ù–æ–¥–∞ –±—ã–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.'
}

delete_node() {
  read -p '–ï—Å–ª–∏ —É–≤–µ—Ä–µ–Ω—ã —É–¥–∞–ª–∏—Ç—å –Ω–æ–¥—É, –≤–≤–µ–¥–∏—Ç–µ –ª—é–±—É—é –±—É–∫–≤—É (CTRL+C —á—Ç–æ–±—ã –≤—ã–π—Ç–∏): ' checkjust

  echo '–ù–∞—á–∏–Ω–∞—é —É–¥–∞–ª—è—Ç—å –Ω–æ–¥—É...'

  cd $HOME
  sudo docker stop orchestrator
  sudo docker stop ipfs_node
  sudo docker rm orchestrator
  sudo docker rm ipfs_node
  sudo docker images
  sudo docker rmi ghcr.io/nesaorg/orchestrator:devnet-latest
  sudo docker rmi ipfs/kubo:latest
  sudo docker image prune -a
  sudo rm -r .nesa/

  echo '–ù–æ–¥–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.'
}

exit_from_script() {
  exit 0
}

while true; do
    channel_logo
    sleep 2
    echo -e "\n\n–ú–µ–Ω—é:"
    echo "1. üåü –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–¥—É"
    echo "2. üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–¥—É"
    echo '3. üÜî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å Node ID'
    echo '4. üìú –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏'
    echo '5. üîë –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á'
    echo "6. üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–¥—É"
    echo '7. üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–¥—É'
    echo "8. ‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–æ–¥—É"
    echo -e "9. üëã –í—ã–π—Ç–∏ –∏–∑ —Å–∫—Ä–∏–ø—Ç–∞\n"
    read -p "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é: " choice

    case $choice in
      1)
        download_node
        ;;
      2)
        launch_node
        ;;
      3)
        check_node_id
        ;;
      4)
        check_logs
        ;;
      5)
        check_priv_key
        ;;
      6)
        restart_node
        ;;
      7)
        stop_node
        ;;
      8)
        delete_node
        ;;
      9)
        exit_from_script
        ;;
      *)
        echo "–ù–µ–≤–µ—Ä–Ω—ã–π –ø—É–Ω–∫—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ü–∏—Ñ—Ä—É –≤ –º–µ–Ω—é."
        ;;
    esac
  done
